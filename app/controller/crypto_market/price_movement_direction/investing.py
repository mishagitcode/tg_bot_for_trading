from datetime import date, datetime, timedelta
import pandas as pd
from app.controller.crypto_market.price_movement_direction.indicators import calculate_macd, calculate_rsi, \
    calculate_ema
from app.model.db.queries.crypto_tickers import get_all_crypto_tickers_by_symbol_and_from_timestamp
from app.model.db.queries.fundamental_crypto_data import get_fear_and_greed_index_by_date


async def investing_analysis(symbol: str, session):
    votes = {
        "LONG": 0,
        "SHORT": 0,
        "HOLD": 0
    }

    explanation = "üìä –ü–æ—è—Å–Ω–µ–Ω–Ω—è:\n\n"

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å–æ–≤—ñ —Ä–∞–º–∫–∏ (–æ—Å—Ç–∞–Ω–Ω—ñ 180 –¥–Ω—ñ–≤)
    start_timestamp = int((datetime.now() - timedelta(days=180)).timestamp() * 1000)
    rows = await get_all_crypto_tickers_by_symbol_and_from_timestamp(session, symbol, start_timestamp)

    df = pd.DataFrame(rows)
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    df.set_index('timestamp', inplace=True)

    latest = rows[0]
    previous = rows[1]
    close = df["close"]

    # RSI
    rsi = calculate_rsi(close, 28).iloc[-1]
    if rsi < 30:
        votes["LONG"] += 1
        explanation += f"‚úÖ RSI ({rsi:.2f}) –≤–∫–∞–∑—É—î –Ω–∞ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω—ñ—Å—Ç—å ‚Äî —Å–∏–≥–Ω–∞–ª LONG\n"
    elif rsi > 70:
        votes["SHORT"] += 1
        explanation += f"‚ö†Ô∏è RSI ({rsi:.2f}) –≤–∫–∞–∑—É—î –Ω–∞ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω—ñ—Å—Ç—å ‚Äî —Å–∏–≥–Ω–∞–ª SHORT\n"
    else:
        votes["HOLD"] += 1
        explanation += f"‚ÑπÔ∏è RSI ({rsi:.2f}) –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ñ–π –∑–æ–Ω—ñ ‚Äî —Å–∏–≥–Ω–∞–ª HOLD\n"

    # MACD
    macd_line, signal_line, _ = calculate_macd(close, 19, 39, 12)
    if macd_line.iloc[-1] > signal_line.iloc[-1]:
        votes["LONG"] += 1
        explanation += f"‚úÖ MACD ({macd_line.iloc[-1]:.2f}) –≤–∏—â–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ—ó ({signal_line.iloc[-1]:.2f}) ‚Äî —Å–∏–≥–Ω–∞–ª LONG\n"
    elif macd_line.iloc[-1] < signal_line.iloc[-1]:
        votes["SHORT"] += 1
        explanation += f"‚ö†Ô∏è MACD ({macd_line.iloc[-1]:.2f}) –Ω–∏–∂—á–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ—ó ({signal_line.iloc[-1]:.2f}) ‚Äî —Å–∏–≥–Ω–∞–ª SHORT\n"
    else:
        votes["HOLD"] += 1
        explanation += f"‚ÑπÔ∏è MACD ‚âà —Å–∏–≥–Ω–∞–ª—å–Ω–∞ –ª—ñ–Ω—ñ—è ‚Äî —Å–∏–≥–Ω–∞–ª HOLD\n"

    # EMA50
    ema50 = calculate_ema(close, 50)
    if close.iloc[-1] > ema50.iloc[-1]:
        votes["LONG"] += 1
        explanation += f"‚úÖ –¶—ñ–Ω–∞ ({close.iloc[-1]:.2f}) –≤–∏—â–µ EMA50 ({ema50.iloc[-1]:.2f}) ‚Äî —Å–∏–≥–Ω–∞–ª LONG\n"
    elif close.iloc[-1] < ema50.iloc[-1]:
        votes["SHORT"] += 1
        explanation += f"‚ö†Ô∏è –¶—ñ–Ω–∞ ({close.iloc[-1]:.2f}) –Ω–∏–∂—á–µ EMA50 ({ema50.iloc[-1]:.2f}) ‚Äî —Å–∏–≥–Ω–∞–ª SHORT\n"
    else:
        votes["HOLD"] += 1
        explanation += f"‚ÑπÔ∏è –¶—ñ–Ω–∞ ‚âà EMA50 ‚Äî —Å–∏–≥–Ω–∞–ª HOLD\n"

    # EMA100
    ema100 = calculate_ema(close, 100)
    if close.iloc[-1] > ema100.iloc[-1]:
        votes["LONG"] += 1
        explanation += f"‚úÖ –¶—ñ–Ω–∞ ({close.iloc[-1]:.2f}) –≤–∏—â–µ EMA100 ({ema100.iloc[-1]:.2f}) ‚Äî —Å–∏–≥–Ω–∞–ª LONG\n"
    elif close.iloc[-1] < ema100.iloc[-1]:
        votes["SHORT"] += 1
        explanation += f"‚ö†Ô∏è –¶—ñ–Ω–∞ ({close.iloc[-1]:.2f}) –Ω–∏–∂—á–µ EMA100 ({ema100.iloc[-1]:.2f}) ‚Äî —Å–∏–≥–Ω–∞–ª SHORT\n"
    else:
        votes["HOLD"] += 1
        explanation += f"‚ÑπÔ∏è –¶—ñ–Ω–∞ ‚âà EMA100 ‚Äî —Å–∏–≥–Ω–∞–ª HOLD\n"

    # EMA200
    ema200 = calculate_ema(close, 200)
    if close.iloc[-1] > ema200.iloc[-1]:
        votes["LONG"] += 1
        explanation += f"‚úÖ –¶—ñ–Ω–∞ ({close.iloc[-1]:.2f}) –≤–∏—â–µ EMA200 ({ema200.iloc[-1]:.2f}) ‚Äî —Å–∏–≥–Ω–∞–ª LONG\n"
    elif close.iloc[-1] < ema200.iloc[-1]:
        votes["SHORT"] += 1
        explanation += f"‚ö†Ô∏è –¶—ñ–Ω–∞ ({close.iloc[-1]:.2f}) –Ω–∏–∂—á–µ EMA200 ({ema200.iloc[-1]:.2f}) ‚Äî —Å–∏–≥–Ω–∞–ª SHORT\n"
    else:
        votes["HOLD"] += 1
        explanation += f"‚ÑπÔ∏è –¶—ñ–Ω–∞ ‚âà EMA200 ‚Äî —Å–∏–≥–Ω–∞–ª HOLD\n"

    # –¶—ñ–Ω–∞ + –æ–±'—î–º
    if latest["close"] > previous["close"]:
        if latest["quote_asset_volume"] > previous["quote_asset_volume"]:
            votes["LONG"] += 1
            explanation += "‚úÖ –¶—ñ–Ω–∞ –∑—Ä–æ—Å–ª–∞ —Ä–∞–∑–æ–º —ñ–∑ –æ–±'—î–º–æ–º ‚Äî —Å–∏–≥–Ω–∞–ª LONG\n"
        else:
            votes["SHORT"] += 1
            explanation += "‚ö†Ô∏è –¶—ñ–Ω–∞ –∑—Ä–æ—Å–ª–∞, –∞–ª–µ –æ–±'—î–º –≤–ø–∞–≤ ‚Äî —Å–∏–≥–Ω–∞–ª SHORT\n"

    # –¶—ñ–Ω–∞ + –≤—ñ–¥–∫—Ä–∏—Ç–∏–π —ñ–Ω—Ç–µ—Ä–µ—Å
    if latest["close"] > previous["close"]:
        if latest["sum_open_interest"] > previous["sum_open_interest"]:
            votes["LONG"] += 1
            explanation += "‚úÖ –¶—ñ–Ω–∞ –∑—Ä–æ—Å–ª–∞ —Ä–∞–∑–æ–º —ñ–∑ –≤—ñ–¥–∫—Ä–∏—Ç–∏–º —ñ–Ω—Ç–µ—Ä–µ—Å–æ–º ‚Äî —Å–∏–≥–Ω–∞–ª LONG\n"
        else:
            votes["SHORT"] += 1
            explanation += "‚ö†Ô∏è –¶—ñ–Ω–∞ –∑—Ä–æ—Å–ª–∞, –∞–ª–µ –≤—ñ–¥–∫—Ä–∏—Ç–∏–π —ñ–Ω—Ç–µ—Ä–µ—Å –≤–ø–∞–≤ ‚Äî —Å–∏–≥–Ω–∞–ª SHORT\n"

    # –û—Ç—Ä–∏–º—É—î–º–æ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π fear and greed index
    today = date.today()
    fear_greed_index = await get_fear_and_greed_index_by_date(session, today)

    if fear_greed_index is not None:
        if fear_greed_index > 75:
            votes["SHORT"] += 1
            explanation += f"‚ö†Ô∏è Fear & Greed Index = {fear_greed_index}, —Ä–∏–Ω–æ–∫ –∂–∞–¥—ñ–±–Ω–∏–π ‚Äî —Å–∏–≥–Ω–∞–ª SHORT\n"
        elif fear_greed_index < 25:
            votes["LONG"] += 1
            explanation += f"‚úÖ Fear & Greed Index = {fear_greed_index}, —Ä–∏–Ω–æ–∫ –±–æ—è–∑–∫–∏–π ‚Äî —Å–∏–≥–Ω–∞–ª LONG\n"
        else:
            votes["HOLD"] += 1
            explanation += f"‚ÑπÔ∏è Fear & Greed Index = {fear_greed_index}, —Ä–∏–Ω–æ–∫ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π ‚Äî —Å–∏–≥–Ω–∞–ª HOLD\n"

    # –û—Å—Ç–∞—Ç–æ—á–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è
    if votes["LONG"] > votes["SHORT"]:
        result = f"{symbol.upper()} üü¢ LONG\n\n"
    elif votes["SHORT"] > votes["LONG"]:
        result = f"{symbol.upper()} üî¥ SHORT\n\n"
    else:
        result = f"{symbol.upper()} ‚ö™Ô∏è HOLD\n\n"

    result += explanation

    return result

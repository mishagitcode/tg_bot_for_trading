import os
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from app.model.db.database import async_session_maker
from app.controller.crypto_market.price_movement_direction.analysis import price_movement_direction_analysis
from app.controller.crypto_market.point_of_entry_and_exit.analysis import point_of_entry_and_exit
from app.data.crypto_market.base import assets
from app.model.db.queries.users import create_user, get_user, user_update

load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

txt = """
----------------------------------------------------------------------------------------------------

üåé <b>–†–∏–Ω–æ–∫</b> - —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π —Ä–∏–Ω–æ–∫, –Ω–∞ —è–∫–æ–º—É –±–æ—Ç –±—É–¥–µ –∑–¥—ñ–π—Å–Ω—é–≤–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑:

üí∞ <i>—Årypto</i> (—Ä–∏–Ω–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç)
üè∑Ô∏è <i>stocks</i> (—Ä–∏–Ω–æ–∫ –∞–∫—Ü—ñ–π)
üí≥ <i>bonds</i> (—Ä–∏–Ω–æ–∫ –æ–±–ª—ñ–≥–∞—Ü—ñ–π)

----------------------------------------------------------------------------------------------------

üìä <b>–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É</b> - —Ü–µ –ø–∞—Ä–∞–º–µ—Ç—Ä, —è–∫–∏–π –≤–∫–∞–∑—É—î, —è–∫–∏–π —Ç–∏–ø –∞–Ω–∞–ª—ñ–∑—É –±—É–¥–µ –ø—Ä–æ–≤–æ–¥–∏—Ç–∏—Å—è:

üìà <i>price movement direction</i> (–∞–Ω–∞–ª—ñ–∑ –Ω–∞–ø—Ä—è–º—É —Ä—É—Ö—É —Ü—ñ–Ω–∏)
üéØ <i>point of entry and exit</i> (–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–æ—á–æ–∫ –≤—Ö–æ–¥—É —Ç–∞ –≤–∏—Ö–æ–¥—É –∑ —Ä–∏–Ω–∫—É –∑ –ø–æ–∑–∏—Ü—ñ—ó)

----------------------------------------------------------------------------------------------------

üíº <b>–¢–æ—Ä–≥–æ–≤–∏–π —Å—Ç–∏–ª—å</b> - —Ü–µ –ø–∞—Ä–∞–º–µ—Ç—Ä, —è–∫–∏–π –≤–∏–∑–Ω–∞—á–∞—î —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é —Ç–æ—Ä–≥—ñ–≤–ª—ñ:

‚ö° <i>scalping</i> (–∫–æ—Ä–æ—Ç–∫–æ—Å—Ç—Ä–æ–∫–æ–≤–∞ —Ç–æ—Ä–≥—ñ–≤–ª—è –∑ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è–º —ñ –∑–∞–∫—Ä–∏—Ç—Ç—è–º —É–≥–æ–¥ —É –º–µ–∂–∞—Ö –∫—ñ–ª—å–∫–æ—Ö —Ö–≤–∏–ª–∏–Ω)
‚è≥ <i>intraday</i> (—Ç–æ—Ä–≥—ñ–≤–ª—è –≤ –º–µ–∂–∞—Ö –æ–¥–Ω–æ–≥–æ –¥–Ω—è, —É–≥–æ–¥–∏ –≤—ñ–¥–∫—Ä–∏–≤–∞—é—Ç—å—Å—è —Ç–∞ –∑–∞–∫—Ä–∏–≤–∞—é—Ç—å—Å—è –≤ —Ç–æ–π –∂–µ –¥–µ–Ω—å)
üìå <i>swing</i> (—Å–µ—Ä–µ–¥–Ω—å–æ—Å—Ç—Ä–æ–∫–æ–≤–∞ —Ç–æ—Ä–≥—ñ–≤–ª—è, –¥–µ —É–≥–æ–¥–∏ —Ç—Ä–∏–≤–∞—é—Ç—å –≤—ñ–¥ –∫—ñ–ª—å–∫–æ—Ö –¥–Ω—ñ–≤ –¥–æ –∫—ñ–ª—å–∫–æ—Ö —Ç–∏–∂–Ω—ñ–≤)
üè¶ <i>investing</i> (–¥–æ–≤–≥–æ—Å—Ç—Ä–æ–∫–æ–≤–µ —ñ–Ω–≤–µ—Å—Ç—É–≤–∞–Ω–Ω—è, —É–≥–æ–¥–∏ –º–æ–∂—É—Ç—å —Ç—Ä–∏–≤–∞—Ç–∏ –º—ñ—Å—è—Ü—è–º–∏ –∞–±–æ –Ω–∞–≤—ñ—Ç—å —Ä–æ–∫–∞–º–∏)

----------------------------------------------------------------------------------------------------

‚öôÔ∏è <b>–†–µ–∂–∏–º</b> - —Ü–µ –ø–∞—Ä–∞–º–µ—Ç—Ä, —â–æ –≤–∏–∑–Ω–∞—á–∞—î, —Ä–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º:

üìé <i>manual</i> (–≤–∏ –Ω–∞–¥—Å–∏–ª–∞—î—Ç–µ –Ω–∞–∑–≤—É —Ç—ñ–∫–µ—Ä–∞, —ñ –æ—Ç—Ä–∏–º—É—î—Ç–µ –∞–Ω–∞–ª—ñ–∑ –Ω–∞ —Å–≤—ñ–π –∑–∞–ø–∏—Ç)
ü§ñ <i>auto</i> (–±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ 24/7 –Ω–∞–¥—Å–∏–ª–∞—î –∞–Ω–∞–ª—ñ–∑, –∫–æ–ª–∏ –Ω–∞ —Ä–∏–Ω–∫—É –∑'—è–≤–ª—è—î—Ç—å—Å—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∞ —Å–∏—Ç—É–∞—Ü—ñ—è)

----------------------------------------------------------------------------------------------------

–ù–∞–ø–∏—à—ñ—Ç—å /start –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è
"""


@dp.message(F.content_type.in_({"photo", "video", "audio", "document", "sticker", "voice", "location", "contact"}))
async def handle_non_text(message: Message):
    await message.answer("‚ö†Ô∏è –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Ü—å–æ–≥–æ —Ç–∏–ø—É")
    await handle_start(message)


@dp.message(CommandStart())
async def handle_start(message: Message):
    async with async_session_maker() as session:
        await create_user(session, message.from_user.id, message.from_user.username)
        user = await get_user(session, message.from_user.id)

        if not user or any(user.get(field) is None for field in ("market", "result_type", "trading_style", "mode")):
            await message.answer("‚öôÔ∏è –ü–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º —Ä–æ–±–æ—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –±–æ—Ç–∞ —É /settings")
        else:
            await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å —Ç—ñ–∫–µ—Ä \n\n<em>–ü—Ä–∏–∫–ª–∞–¥: btc</em>")


@dp.message(Command("list"))
async def handle_settings(message: Message):
    result = ""
    for asset in assets:
        result += "- " + asset.replace("USDT", "") + "\n"
    await message.answer(f"–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç—ñ–∫–µ—Ä—ñ–≤:\n\n{result}")


@dp.message(Command("settings"))
async def handle_settings(message: Message):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="info")],
        [InlineKeyboardButton(text="üåé –†–∏–Ω–æ–∫", callback_data="market"),
         InlineKeyboardButton(text="üìä –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É", callback_data="result_type")],
        [InlineKeyboardButton(text="üíº –¢–æ—Ä–≥–æ–≤–∏–π —Å—Ç–∏–ª—å", callback_data="style"),
         InlineKeyboardButton(text="‚öôÔ∏è –†–µ–∂–∏–º", callback_data="mode")]
    ])

    async with async_session_maker() as session:
        user = await get_user(session, message.from_user.id) or {}

    def safe(val): return val if val is not None else "–Ω–µ –∑–∞–¥–∞–Ω–æ"

    await message.answer(
        f"–ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: \n\n"
        f"–†–∏–Ω–æ–∫: <em>{safe(user.get('market'))}</em>\n"
        f"–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É: <em>{safe(user.get('result_type'))}</em>\n"
        f"–¢–æ—Ä–≥–æ–≤–∏–π —Å—Ç–∏–ª—å: <em>{safe(user.get('trading_style'))}</em>\n"
        f"–†–µ–∂–∏–º: <em>{safe(user.get('mode'))}</em>",
        reply_markup=markup
    )


@dp.callback_query()
async def handle_settings_callback(callback: CallbackQuery):
    data = callback.data
    markup = InlineKeyboardMarkup(inline_keyboard=[])

    if data == "info":
        await callback.message.answer(txt, reply_markup=markup)

    elif data == "market":
        markup.inline_keyboard.append([InlineKeyboardButton(text="üí∞ crypto", callback_data="crypto")])
        await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å —Ä–∏–Ω–æ–∫:", reply_markup=markup)

    elif data == "result_type":
        markup.inline_keyboard.append([InlineKeyboardButton(
            text="üìà price movement direction",
            callback_data="price movement direction"
        )])
        markup.inline_keyboard.append([InlineKeyboardButton(
            text="üéØ point of entry and exit",
            callback_data="point of entry and exit"
        )])
        await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É:", reply_markup=markup)

    elif data == "style":
        markup.inline_keyboard.extend([
            [InlineKeyboardButton(text="‚ö° scalping", callback_data="scalping"),
             InlineKeyboardButton(text="‚è≥ intraday", callback_data="intraday")],
            [InlineKeyboardButton(text="üìå swing", callback_data="swing"),
             InlineKeyboardButton(text="üè¶ investing", callback_data="investing")]
        ])
        await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–æ—Ä–≥–æ–≤–∏–π —Å—Ç–∏–ª—å:", reply_markup=markup)

    elif data == "mode":
        markup.inline_keyboard.append([InlineKeyboardButton(text="üìé manual", callback_data="manual")])
        await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º:", reply_markup=markup)

    field_map = {
        "crypto": "market",
        "price movement direction": "result_type",
        "point of entry and exit": "result_type",
        "scalping": "trading_style",
        "intraday": "trading_style",
        "swing": "trading_style",
        "investing": "trading_style",
        "manual": "mode",
        "auto": "mode"
    }

    if data in field_map:
        field = field_map[data]
        async with async_session_maker() as session:
            await user_update(session, callback.from_user.id, field, data)
        await callback.message.answer(f"‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: <b>{data}</b>\n\n–ù–∞–ø–∏—à—ñ—Ç—å /start –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è")
        await callback.answer()


@dp.message(F.text)
async def handle_text(message: Message):
    ticker_input = message.text.upper()
    ticker = ticker_input if ticker_input.endswith("USDT") else ticker_input + "USDT"

    async with async_session_maker() as session:
        user = await get_user(session, message.from_user.id)

        if not user or any(user.get(field) is None for field in ("market", "result_type", "trading_style", "mode")):
            await message.answer("‚öôÔ∏è –ü–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º —Ä–æ–±–æ—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –±–æ—Ç–∞ —É /settings")
            return

        if ticker not in assets:
            await message.answer("‚ö†Ô∏è –¢–∞–∫–æ–≥–æ —Ç—ñ–∫–µ—Ä–∞ –Ω–µ —ñ—Å–Ω—É—î")
            return

        await message.answer("‚è≥ –ó–∞—á–µ–∫–∞–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –∞–Ω–∞–ª—ñ–∑...")

        if user["result_type"] == "price movement direction":
            analysis = await price_movement_direction_analysis(ticker, user.get("trading_style"), session)
        else:
            analysis = await point_of_entry_and_exit(ticker, user.get("trading_style"), session)

        await message.answer(analysis)
        await handle_start(message)


async def start_bot():
    print("Launching the bot...")
    await dp.start_polling(bot)
